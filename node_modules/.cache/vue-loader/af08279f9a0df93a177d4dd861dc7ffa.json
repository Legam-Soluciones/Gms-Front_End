{"remainingRequest":"C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\src\\components\\Categorias\\Documentos\\documentosComponent.vue?vue&type=template&id=3ffcb19d&","dependencies":[{"path":"C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\src\\components\\Categorias\\Documentos\\documentosComponent.vue","mtime":1606337697278},{"path":"C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605105376825},{"path":"C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605105376825},{"path":"C:\\Users\\Digital\\Desktop\\GMS\\Proyect\\gms-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}